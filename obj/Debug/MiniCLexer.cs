//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Vasilis\source\repos\SimpleCalc\MiniC\MiniC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniC {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniCLexer : Lexer {
	public const int
		IF=1, WHILE=2, FOR=3, BREAK=4, ELSE=5, DO=6, RETURN=7, FUNCTION=8, PRINT=9, 
		AND=10, OR=11, NOT=12, LT=13, GT=14, GTE=15, LTE=16, EQUAL=17, NEQUAL=18, 
		DIV=19, MULT=20, PLUS=21, PLUSPLUS=22, MINUS=23, LBRACKET=24, RBRACKET=25, 
		LP=26, RP=27, ASSIGN=28, SEMICOLON=29, COMMA=30, TYPE=31, STRING=32, COMMENT=33, 
		NUM=34, VARIABLE=35, WS=36;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"IF", "WHILE", "FOR", "BREAK", "ELSE", "DO", "RETURN", "FUNCTION", "PRINT", 
		"AND", "OR", "NOT", "LT", "GT", "GTE", "LTE", "EQUAL", "NEQUAL", "DIV", 
		"MULT", "PLUS", "PLUSPLUS", "MINUS", "LBRACKET", "RBRACKET", "LP", "RP", 
		"ASSIGN", "SEMICOLON", "COMMA", "TYPE", "STRING", "COMMENT", "NUM", "VARIABLE", 
		"WS"
	};


	public MiniCLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'while'", "'for'", "'break'", "'else'", "'do'", "'return'", 
		"'function'", "'print'", "'&&'", "'||'", "'!'", "'<'", "'>'", "'>='", 
		"'<='", "'=='", "'!='", "'/'", "'*'", "'+'", "'++'", "'-'", "'{'", "'}'", 
		"'('", "')'", "'='", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "WHILE", "FOR", "BREAK", "ELSE", "DO", "RETURN", "FUNCTION", 
		"PRINT", "AND", "OR", "NOT", "LT", "GT", "GTE", "LTE", "EQUAL", "NEQUAL", 
		"DIV", "MULT", "PLUS", "PLUSPLUS", "MINUS", "LBRACKET", "RBRACKET", "LP", 
		"RP", "ASSIGN", "SEMICOLON", "COMMA", "TYPE", "STRING", "COMMENT", "NUM", 
		"VARIABLE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2&\x105\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3"+
		"\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 "+
		"\x5 \xC0\n \x3!\x3!\x3!\x3!\x3!\x3!\a!\xC8\n!\f!\xE!\xCB\v!\x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\a!\xD4\n!\f!\xE!\xD7\v!\x3!\x5!\xDA\n!\x3\"\x3\"\x3"+
		"\"\x3\"\x3\"\a\"\xE1\n\"\f\"\xE\"\xE4\v\"\x3\"\x3\"\x3\"\x3\"\a\"\xEA"+
		"\n\"\f\"\xE\"\xED\v\"\x5\"\xEF\n\"\x3#\x3#\a#\xF3\n#\f#\xE#\xF6\v#\x3"+
		"#\x5#\xF9\n#\x3$\x3$\a$\xFD\n$\f$\xE$\x100\v$\x3%\x3%\x3%\x3%\x3\xE2\x2"+
		"\x2&\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n"+
		"\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11"+
		"!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31"+
		"\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!"+
		"\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&\x3\x2\n\x4\x2\f\f$$\x4\x2\f\f))\x3"+
		"\x2\x33;\x3\x2\x32;\x3\x2\x32\x32\x4\x2\x43\\\x63|\x5\x2\x32;\x43\\\x63"+
		"|\x5\x2\v\f\xF\xF\"\"\x115\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3"+
		"\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3"+
		"\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2"+
		"\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2"+
		"\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2"+
		"\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/"+
		"\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2"+
		"\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2"+
		"\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2"+
		"\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x3K\x3\x2\x2\x2\x5N\x3\x2\x2\x2\a"+
		"T\x3\x2\x2\x2\tX\x3\x2\x2\x2\v^\x3\x2\x2\x2\r\x63\x3\x2\x2\x2\xF\x66\x3"+
		"\x2\x2\x2\x11m\x3\x2\x2\x2\x13v\x3\x2\x2\x2\x15|\x3\x2\x2\x2\x17\x7F\x3"+
		"\x2\x2\x2\x19\x82\x3\x2\x2\x2\x1B\x84\x3\x2\x2\x2\x1D\x86\x3\x2\x2\x2"+
		"\x1F\x88\x3\x2\x2\x2!\x8B\x3\x2\x2\x2#\x8E\x3\x2\x2\x2%\x91\x3\x2\x2\x2"+
		"\'\x94\x3\x2\x2\x2)\x96\x3\x2\x2\x2+\x98\x3\x2\x2\x2-\x9A\x3\x2\x2\x2"+
		"/\x9D\x3\x2\x2\x2\x31\x9F\x3\x2\x2\x2\x33\xA1\x3\x2\x2\x2\x35\xA3\x3\x2"+
		"\x2\x2\x37\xA5\x3\x2\x2\x2\x39\xA7\x3\x2\x2\x2;\xA9\x3\x2\x2\x2=\xAB\x3"+
		"\x2\x2\x2?\xBF\x3\x2\x2\x2\x41\xD9\x3\x2\x2\x2\x43\xEE\x3\x2\x2\x2\x45"+
		"\xF8\x3\x2\x2\x2G\xFA\x3\x2\x2\x2I\x101\x3\x2\x2\x2KL\ak\x2\x2LM\ah\x2"+
		"\x2M\x4\x3\x2\x2\x2NO\ay\x2\x2OP\aj\x2\x2PQ\ak\x2\x2QR\an\x2\x2RS\ag\x2"+
		"\x2S\x6\x3\x2\x2\x2TU\ah\x2\x2UV\aq\x2\x2VW\at\x2\x2W\b\x3\x2\x2\x2XY"+
		"\a\x64\x2\x2YZ\at\x2\x2Z[\ag\x2\x2[\\\a\x63\x2\x2\\]\am\x2\x2]\n\x3\x2"+
		"\x2\x2^_\ag\x2\x2_`\an\x2\x2`\x61\au\x2\x2\x61\x62\ag\x2\x2\x62\f\x3\x2"+
		"\x2\x2\x63\x64\a\x66\x2\x2\x64\x65\aq\x2\x2\x65\xE\x3\x2\x2\x2\x66g\a"+
		"t\x2\x2gh\ag\x2\x2hi\av\x2\x2ij\aw\x2\x2jk\at\x2\x2kl\ap\x2\x2l\x10\x3"+
		"\x2\x2\x2mn\ah\x2\x2no\aw\x2\x2op\ap\x2\x2pq\a\x65\x2\x2qr\av\x2\x2rs"+
		"\ak\x2\x2st\aq\x2\x2tu\ap\x2\x2u\x12\x3\x2\x2\x2vw\ar\x2\x2wx\at\x2\x2"+
		"xy\ak\x2\x2yz\ap\x2\x2z{\av\x2\x2{\x14\x3\x2\x2\x2|}\a(\x2\x2}~\a(\x2"+
		"\x2~\x16\x3\x2\x2\x2\x7F\x80\a~\x2\x2\x80\x81\a~\x2\x2\x81\x18\x3\x2\x2"+
		"\x2\x82\x83\a#\x2\x2\x83\x1A\x3\x2\x2\x2\x84\x85\a>\x2\x2\x85\x1C\x3\x2"+
		"\x2\x2\x86\x87\a@\x2\x2\x87\x1E\x3\x2\x2\x2\x88\x89\a@\x2\x2\x89\x8A\a"+
		"?\x2\x2\x8A \x3\x2\x2\x2\x8B\x8C\a>\x2\x2\x8C\x8D\a?\x2\x2\x8D\"\x3\x2"+
		"\x2\x2\x8E\x8F\a?\x2\x2\x8F\x90\a?\x2\x2\x90$\x3\x2\x2\x2\x91\x92\a#\x2"+
		"\x2\x92\x93\a?\x2\x2\x93&\x3\x2\x2\x2\x94\x95\a\x31\x2\x2\x95(\x3\x2\x2"+
		"\x2\x96\x97\a,\x2\x2\x97*\x3\x2\x2\x2\x98\x99\a-\x2\x2\x99,\x3\x2\x2\x2"+
		"\x9A\x9B\a-\x2\x2\x9B\x9C\a-\x2\x2\x9C.\x3\x2\x2\x2\x9D\x9E\a/\x2\x2\x9E"+
		"\x30\x3\x2\x2\x2\x9F\xA0\a}\x2\x2\xA0\x32\x3\x2\x2\x2\xA1\xA2\a\x7F\x2"+
		"\x2\xA2\x34\x3\x2\x2\x2\xA3\xA4\a*\x2\x2\xA4\x36\x3\x2\x2\x2\xA5\xA6\a"+
		"+\x2\x2\xA6\x38\x3\x2\x2\x2\xA7\xA8\a?\x2\x2\xA8:\x3\x2\x2\x2\xA9\xAA"+
		"\a=\x2\x2\xAA<\x3\x2\x2\x2\xAB\xAC\a.\x2\x2\xAC>\x3\x2\x2\x2\xAD\xAE\a"+
		"k\x2\x2\xAE\xAF\ap\x2\x2\xAF\xC0\av\x2\x2\xB0\xB1\ah\x2\x2\xB1\xB2\an"+
		"\x2\x2\xB2\xB3\aq\x2\x2\xB3\xB4\a\x63\x2\x2\xB4\xC0\av\x2\x2\xB5\xB6\a"+
		"\x65\x2\x2\xB6\xB7\aj\x2\x2\xB7\xB8\a\x63\x2\x2\xB8\xC0\at\x2\x2\xB9\xBA"+
		"\au\x2\x2\xBA\xBB\av\x2\x2\xBB\xBC\at\x2\x2\xBC\xBD\ak\x2\x2\xBD\xBE\a"+
		"p\x2\x2\xBE\xC0\ai\x2\x2\xBF\xAD\x3\x2\x2\x2\xBF\xB0\x3\x2\x2\x2\xBF\xB5"+
		"\x3\x2\x2\x2\xBF\xB9\x3\x2\x2\x2\xC0@\x3\x2\x2\x2\xC1\xC9\a$\x2\x2\xC2"+
		"\xC8\n\x2\x2\x2\xC3\xC4\a^\x2\x2\xC4\xC8\a\f\x2\x2\xC5\xC6\a^\x2\x2\xC6"+
		"\xC8\v\x2\x2\x2\xC7\xC2\x3\x2\x2\x2\xC7\xC3\x3\x2\x2\x2\xC7\xC5\x3\x2"+
		"\x2\x2\xC8\xCB\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA"+
		"\xCC\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCC\xDA\a$\x2\x2\xCD\xD5\a)\x2\x2"+
		"\xCE\xD4\n\x3\x2\x2\xCF\xD0\a^\x2\x2\xD0\xD4\a\f\x2\x2\xD1\xD2\a^\x2\x2"+
		"\xD2\xD4\v\x2\x2\x2\xD3\xCE\x3\x2\x2\x2\xD3\xCF\x3\x2\x2\x2\xD3\xD1\x3"+
		"\x2\x2\x2\xD4\xD7\x3\x2\x2\x2\xD5\xD3\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2"+
		"\xD6\xD8\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD8\xDA\a)\x2\x2\xD9\xC1\x3\x2"+
		"\x2\x2\xD9\xCD\x3\x2\x2\x2\xDA\x42\x3\x2\x2\x2\xDB\xDC\a\x31\x2\x2\xDC"+
		"\xDD\a,\x2\x2\xDD\xE2\x3\x2\x2\x2\xDE\xE1\v\x2\x2\x2\xDF\xE1\a\f\x2\x2"+
		"\xE0\xDE\x3\x2\x2\x2\xE0\xDF\x3\x2\x2\x2\xE1\xE4\x3\x2\x2\x2\xE2\xE3\x3"+
		"\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE3\xE5\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2"+
		"\xE5\xE6\a,\x2\x2\xE6\xEF\a^\x2\x2\xE7\xEB\a^\x2\x2\xE8\xEA\v\x2\x2\x2"+
		"\xE9\xE8\x3\x2\x2\x2\xEA\xED\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC\x3"+
		"\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xEE\xDB\x3\x2\x2\x2"+
		"\xEE\xE7\x3\x2\x2\x2\xEF\x44\x3\x2\x2\x2\xF0\xF4\t\x4\x2\x2\xF1\xF3\t"+
		"\x5\x2\x2\xF2\xF1\x3\x2\x2\x2\xF3\xF6\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2"+
		"\xF4\xF5\x3\x2\x2\x2\xF5\xF9\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF7\xF9\t"+
		"\x6\x2\x2\xF8\xF0\x3\x2\x2\x2\xF8\xF7\x3\x2\x2\x2\xF9\x46\x3\x2\x2\x2"+
		"\xFA\xFE\t\a\x2\x2\xFB\xFD\t\b\x2\x2\xFC\xFB\x3\x2\x2\x2\xFD\x100\x3\x2"+
		"\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFFH\x3\x2\x2\x2\x100\xFE"+
		"\x3\x2\x2\x2\x101\x102\t\t\x2\x2\x102\x103\x3\x2\x2\x2\x103\x104\b%\x2"+
		"\x2\x104J\x3\x2\x2\x2\x10\x2\xBF\xC7\xC9\xD3\xD5\xD9\xE0\xE2\xEB\xEE\xF4"+
		"\xF8\xFE\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniC
