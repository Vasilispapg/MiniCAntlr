//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Vasilis\source\repos\SimpleCalc\MiniC\MiniC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniC {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniCLexer : Lexer {
	public const int
		IF=1, WHILE=2, BREAK=3, ELSE=4, RETURN=5, FUNCTION=6, UNION=7, UNIQUE=8, 
		JOIN=9, SETXOR=10, SETDIFF=11, ISMEMBER=12, AND=13, OR=14, NOT=15, LT=16, 
		GT=17, GTE=18, LTE=19, EQUAL=20, NEQUAL=21, DIV=22, MULT=23, PLUS=24, 
		PLUSPLUS=25, MINUS=26, LBRACKET=27, RBRACKET=28, LP=29, RP=30, ASSIGN=31, 
		SEMICOLON=32, COMMA=33, NUM=34, VARIABLE=35, WS=36;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"IF", "WHILE", "BREAK", "ELSE", "RETURN", "FUNCTION", "UNION", "UNIQUE", 
		"JOIN", "SETXOR", "SETDIFF", "ISMEMBER", "AND", "OR", "NOT", "LT", "GT", 
		"GTE", "LTE", "EQUAL", "NEQUAL", "DIV", "MULT", "PLUS", "PLUSPLUS", "MINUS", 
		"LBRACKET", "RBRACKET", "LP", "RP", "ASSIGN", "SEMICOLON", "COMMA", "NUM", 
		"VARIABLE", "WS"
	};


	public MiniCLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'while'", "'break'", "'else'", "'return'", "'function'", 
		"'union'", "'unique'", "'join'", "'setxor'", "'setdiff'", "'ismember'", 
		"'&&'", "'||'", "'!'", "'<'", "'>'", "'>='", "'<='", "'=='", "'!='", "'/'", 
		"'*'", "'+'", "'++'", "'-'", "'{'", "'}'", "'('", "')'", "'='", "';'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "WHILE", "BREAK", "ELSE", "RETURN", "FUNCTION", "UNION", "UNIQUE", 
		"JOIN", "SETXOR", "SETDIFF", "ISMEMBER", "AND", "OR", "NOT", "LT", "GT", 
		"GTE", "LTE", "EQUAL", "NEQUAL", "DIV", "MULT", "PLUS", "PLUSPLUS", "MINUS", 
		"LBRACKET", "RBRACKET", "LP", "RP", "ASSIGN", "SEMICOLON", "COMMA", "NUM", 
		"VARIABLE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2&\xDC\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3"+
		"\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"\x3"+
		"\"\x3#\x3#\a#\xCD\n#\f#\xE#\xD0\v#\x3$\x3$\a$\xD4\n$\f$\xE$\xD7\v$\x3"+
		"%\x3%\x3%\x3%\x2\x2\x2&\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2"+
		"\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D"+
		"\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2"+
		"\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2"+
		"\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&\x3\x2\a\x3\x2\x33;\x3"+
		"\x2\x32;\x4\x2\x43\\\x63|\x5\x2\x32;\x43\\\x63|\x5\x2\v\f\xF\xF\"\"\xDD"+
		"\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2"+
		"\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2"+
		"\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2"+
		"\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3"+
		"\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2"+
		"\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2"+
		"\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2"+
		"\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2"+
		"\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2"+
		"\x2\x3K\x3\x2\x2\x2\x5N\x3\x2\x2\x2\aT\x3\x2\x2\x2\tZ\x3\x2\x2\x2\v_\x3"+
		"\x2\x2\x2\r\x66\x3\x2\x2\x2\xFo\x3\x2\x2\x2\x11u\x3\x2\x2\x2\x13|\x3\x2"+
		"\x2\x2\x15\x81\x3\x2\x2\x2\x17\x88\x3\x2\x2\x2\x19\x90\x3\x2\x2\x2\x1B"+
		"\x99\x3\x2\x2\x2\x1D\x9C\x3\x2\x2\x2\x1F\x9F\x3\x2\x2\x2!\xA1\x3\x2\x2"+
		"\x2#\xA3\x3\x2\x2\x2%\xA5\x3\x2\x2\x2\'\xA8\x3\x2\x2\x2)\xAB\x3\x2\x2"+
		"\x2+\xAE\x3\x2\x2\x2-\xB1\x3\x2\x2\x2/\xB3\x3\x2\x2\x2\x31\xB5\x3\x2\x2"+
		"\x2\x33\xB7\x3\x2\x2\x2\x35\xBA\x3\x2\x2\x2\x37\xBC\x3\x2\x2\x2\x39\xBE"+
		"\x3\x2\x2\x2;\xC0\x3\x2\x2\x2=\xC2\x3\x2\x2\x2?\xC4\x3\x2\x2\x2\x41\xC6"+
		"\x3\x2\x2\x2\x43\xC8\x3\x2\x2\x2\x45\xCA\x3\x2\x2\x2G\xD1\x3\x2\x2\x2"+
		"I\xD8\x3\x2\x2\x2KL\ak\x2\x2LM\ah\x2\x2M\x4\x3\x2\x2\x2NO\ay\x2\x2OP\a"+
		"j\x2\x2PQ\ak\x2\x2QR\an\x2\x2RS\ag\x2\x2S\x6\x3\x2\x2\x2TU\a\x64\x2\x2"+
		"UV\at\x2\x2VW\ag\x2\x2WX\a\x63\x2\x2XY\am\x2\x2Y\b\x3\x2\x2\x2Z[\ag\x2"+
		"\x2[\\\an\x2\x2\\]\au\x2\x2]^\ag\x2\x2^\n\x3\x2\x2\x2_`\at\x2\x2`\x61"+
		"\ag\x2\x2\x61\x62\av\x2\x2\x62\x63\aw\x2\x2\x63\x64\at\x2\x2\x64\x65\a"+
		"p\x2\x2\x65\f\x3\x2\x2\x2\x66g\ah\x2\x2gh\aw\x2\x2hi\ap\x2\x2ij\a\x65"+
		"\x2\x2jk\av\x2\x2kl\ak\x2\x2lm\aq\x2\x2mn\ap\x2\x2n\xE\x3\x2\x2\x2op\a"+
		"w\x2\x2pq\ap\x2\x2qr\ak\x2\x2rs\aq\x2\x2st\ap\x2\x2t\x10\x3\x2\x2\x2u"+
		"v\aw\x2\x2vw\ap\x2\x2wx\ak\x2\x2xy\as\x2\x2yz\aw\x2\x2z{\ag\x2\x2{\x12"+
		"\x3\x2\x2\x2|}\al\x2\x2}~\aq\x2\x2~\x7F\ak\x2\x2\x7F\x80\ap\x2\x2\x80"+
		"\x14\x3\x2\x2\x2\x81\x82\au\x2\x2\x82\x83\ag\x2\x2\x83\x84\av\x2\x2\x84"+
		"\x85\az\x2\x2\x85\x86\aq\x2\x2\x86\x87\at\x2\x2\x87\x16\x3\x2\x2\x2\x88"+
		"\x89\au\x2\x2\x89\x8A\ag\x2\x2\x8A\x8B\av\x2\x2\x8B\x8C\a\x66\x2\x2\x8C"+
		"\x8D\ak\x2\x2\x8D\x8E\ah\x2\x2\x8E\x8F\ah\x2\x2\x8F\x18\x3\x2\x2\x2\x90"+
		"\x91\ak\x2\x2\x91\x92\au\x2\x2\x92\x93\ao\x2\x2\x93\x94\ag\x2\x2\x94\x95"+
		"\ao\x2\x2\x95\x96\a\x64\x2\x2\x96\x97\ag\x2\x2\x97\x98\at\x2\x2\x98\x1A"+
		"\x3\x2\x2\x2\x99\x9A\a(\x2\x2\x9A\x9B\a(\x2\x2\x9B\x1C\x3\x2\x2\x2\x9C"+
		"\x9D\a~\x2\x2\x9D\x9E\a~\x2\x2\x9E\x1E\x3\x2\x2\x2\x9F\xA0\a#\x2\x2\xA0"+
		" \x3\x2\x2\x2\xA1\xA2\a>\x2\x2\xA2\"\x3\x2\x2\x2\xA3\xA4\a@\x2\x2\xA4"+
		"$\x3\x2\x2\x2\xA5\xA6\a@\x2\x2\xA6\xA7\a?\x2\x2\xA7&\x3\x2\x2\x2\xA8\xA9"+
		"\a>\x2\x2\xA9\xAA\a?\x2\x2\xAA(\x3\x2\x2\x2\xAB\xAC\a?\x2\x2\xAC\xAD\a"+
		"?\x2\x2\xAD*\x3\x2\x2\x2\xAE\xAF\a#\x2\x2\xAF\xB0\a?\x2\x2\xB0,\x3\x2"+
		"\x2\x2\xB1\xB2\a\x31\x2\x2\xB2.\x3\x2\x2\x2\xB3\xB4\a,\x2\x2\xB4\x30\x3"+
		"\x2\x2\x2\xB5\xB6\a-\x2\x2\xB6\x32\x3\x2\x2\x2\xB7\xB8\a-\x2\x2\xB8\xB9"+
		"\a-\x2\x2\xB9\x34\x3\x2\x2\x2\xBA\xBB\a/\x2\x2\xBB\x36\x3\x2\x2\x2\xBC"+
		"\xBD\a}\x2\x2\xBD\x38\x3\x2\x2\x2\xBE\xBF\a\x7F\x2\x2\xBF:\x3\x2\x2\x2"+
		"\xC0\xC1\a*\x2\x2\xC1<\x3\x2\x2\x2\xC2\xC3\a+\x2\x2\xC3>\x3\x2\x2\x2\xC4"+
		"\xC5\a?\x2\x2\xC5@\x3\x2\x2\x2\xC6\xC7\a=\x2\x2\xC7\x42\x3\x2\x2\x2\xC8"+
		"\xC9\a.\x2\x2\xC9\x44\x3\x2\x2\x2\xCA\xCE\t\x2\x2\x2\xCB\xCD\t\x3\x2\x2"+
		"\xCC\xCB\x3\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCF\x3"+
		"\x2\x2\x2\xCF\x46\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1\xD5\t\x4\x2\x2\xD2"+
		"\xD4\t\x5\x2\x2\xD3\xD2\x3\x2\x2\x2\xD4\xD7\x3\x2\x2\x2\xD5\xD3\x3\x2"+
		"\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6H\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD8\xD9"+
		"\t\x6\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDB\b%\x2\x2\xDBJ\x3\x2\x2\x2\x5\x2"+
		"\xCE\xD5\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniC
