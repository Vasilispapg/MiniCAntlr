//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Vasilis\source\repos\SimpleCalc\MiniC\MiniC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniC {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniCLexer : Lexer {
	public const int
		IF=1, WHILE=2, BREAK=3, ELSE=4, RETURN=5, FUNCTION=6, AND=7, OR=8, NOT=9, 
		LT=10, GT=11, GTE=12, LTE=13, EQUAL=14, NEQUAL=15, DIV=16, MULT=17, PLUS=18, 
		PLUSPLUS=19, MINUS=20, LBRACKET=21, RBRACKET=22, LP=23, RP=24, ASSIGN=25, 
		SEMICOLON=26, COMMA=27, NUM=28, VARIABLE=29, WS=30;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"IF", "WHILE", "BREAK", "ELSE", "RETURN", "FUNCTION", "AND", "OR", "NOT", 
		"LT", "GT", "GTE", "LTE", "EQUAL", "NEQUAL", "DIV", "MULT", "PLUS", "PLUSPLUS", 
		"MINUS", "LBRACKET", "RBRACKET", "LP", "RP", "ASSIGN", "SEMICOLON", "COMMA", 
		"NUM", "VARIABLE", "WS"
	};


	public MiniCLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'while'", "'break'", "'else'", "'return'", "'function'", 
		"'&&'", "'||'", "'!'", "'<'", "'>'", "'>='", "'<='", "'=='", "'!='", "'/'", 
		"'*'", "'+'", "'++'", "'-'", "'{'", "'}'", "'('", "')'", "'='", "';'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "WHILE", "BREAK", "ELSE", "RETURN", "FUNCTION", "AND", "OR", 
		"NOT", "LT", "GT", "GTE", "LTE", "EQUAL", "NEQUAL", "DIV", "MULT", "PLUS", 
		"PLUSPLUS", "MINUS", "LBRACKET", "RBRACKET", "LP", "RP", "ASSIGN", "SEMICOLON", 
		"COMMA", "NUM", "VARIABLE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2 \xA6\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x3\x2\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3"+
		"\b\x3\t\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1D\x3\x1D\a\x1D\x97\n\x1D\f\x1D\xE\x1D\x9A\v\x1D\x3"+
		"\x1E\x3\x1E\a\x1E\x9E\n\x1E\f\x1E\xE\x1E\xA1\v\x1E\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x2\x2\x2 \x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2"+
		"\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10"+
		"\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/"+
		"\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F"+
		"=\x2 \x3\x2\a\x3\x2\x33;\x3\x2\x32;\x4\x2\x43\\\x63|\x5\x2\x32;\x43\\"+
		"\x63|\x5\x2\v\f\xF\xF\"\"\xA7\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a"+
		"\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF"+
		"\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2"+
		"\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2"+
		"\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2"+
		"\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2"+
		"/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2"+
		"\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2"+
		"\x3?\x3\x2\x2\x2\x5\x42\x3\x2\x2\x2\aH\x3\x2\x2\x2\tN\x3\x2\x2\x2\vS\x3"+
		"\x2\x2\x2\rZ\x3\x2\x2\x2\xF\x63\x3\x2\x2\x2\x11\x66\x3\x2\x2\x2\x13i\x3"+
		"\x2\x2\x2\x15k\x3\x2\x2\x2\x17m\x3\x2\x2\x2\x19o\x3\x2\x2\x2\x1Br\x3\x2"+
		"\x2\x2\x1Du\x3\x2\x2\x2\x1Fx\x3\x2\x2\x2!{\x3\x2\x2\x2#}\x3\x2\x2\x2%"+
		"\x7F\x3\x2\x2\x2\'\x81\x3\x2\x2\x2)\x84\x3\x2\x2\x2+\x86\x3\x2\x2\x2-"+
		"\x88\x3\x2\x2\x2/\x8A\x3\x2\x2\x2\x31\x8C\x3\x2\x2\x2\x33\x8E\x3\x2\x2"+
		"\x2\x35\x90\x3\x2\x2\x2\x37\x92\x3\x2\x2\x2\x39\x94\x3\x2\x2\x2;\x9B\x3"+
		"\x2\x2\x2=\xA2\x3\x2\x2\x2?@\ak\x2\x2@\x41\ah\x2\x2\x41\x4\x3\x2\x2\x2"+
		"\x42\x43\ay\x2\x2\x43\x44\aj\x2\x2\x44\x45\ak\x2\x2\x45\x46\an\x2\x2\x46"+
		"G\ag\x2\x2G\x6\x3\x2\x2\x2HI\a\x64\x2\x2IJ\at\x2\x2JK\ag\x2\x2KL\a\x63"+
		"\x2\x2LM\am\x2\x2M\b\x3\x2\x2\x2NO\ag\x2\x2OP\an\x2\x2PQ\au\x2\x2QR\a"+
		"g\x2\x2R\n\x3\x2\x2\x2ST\at\x2\x2TU\ag\x2\x2UV\av\x2\x2VW\aw\x2\x2WX\a"+
		"t\x2\x2XY\ap\x2\x2Y\f\x3\x2\x2\x2Z[\ah\x2\x2[\\\aw\x2\x2\\]\ap\x2\x2]"+
		"^\a\x65\x2\x2^_\av\x2\x2_`\ak\x2\x2`\x61\aq\x2\x2\x61\x62\ap\x2\x2\x62"+
		"\xE\x3\x2\x2\x2\x63\x64\a(\x2\x2\x64\x65\a(\x2\x2\x65\x10\x3\x2\x2\x2"+
		"\x66g\a~\x2\x2gh\a~\x2\x2h\x12\x3\x2\x2\x2ij\a#\x2\x2j\x14\x3\x2\x2\x2"+
		"kl\a>\x2\x2l\x16\x3\x2\x2\x2mn\a@\x2\x2n\x18\x3\x2\x2\x2op\a@\x2\x2pq"+
		"\a?\x2\x2q\x1A\x3\x2\x2\x2rs\a>\x2\x2st\a?\x2\x2t\x1C\x3\x2\x2\x2uv\a"+
		"?\x2\x2vw\a?\x2\x2w\x1E\x3\x2\x2\x2xy\a#\x2\x2yz\a?\x2\x2z \x3\x2\x2\x2"+
		"{|\a\x31\x2\x2|\"\x3\x2\x2\x2}~\a,\x2\x2~$\x3\x2\x2\x2\x7F\x80\a-\x2\x2"+
		"\x80&\x3\x2\x2\x2\x81\x82\a-\x2\x2\x82\x83\a-\x2\x2\x83(\x3\x2\x2\x2\x84"+
		"\x85\a/\x2\x2\x85*\x3\x2\x2\x2\x86\x87\a}\x2\x2\x87,\x3\x2\x2\x2\x88\x89"+
		"\a\x7F\x2\x2\x89.\x3\x2\x2\x2\x8A\x8B\a*\x2\x2\x8B\x30\x3\x2\x2\x2\x8C"+
		"\x8D\a+\x2\x2\x8D\x32\x3\x2\x2\x2\x8E\x8F\a?\x2\x2\x8F\x34\x3\x2\x2\x2"+
		"\x90\x91\a=\x2\x2\x91\x36\x3\x2\x2\x2\x92\x93\a.\x2\x2\x93\x38\x3\x2\x2"+
		"\x2\x94\x98\t\x2\x2\x2\x95\x97\t\x3\x2\x2\x96\x95\x3\x2\x2\x2\x97\x9A"+
		"\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99:\x3\x2\x2\x2"+
		"\x9A\x98\x3\x2\x2\x2\x9B\x9F\t\x4\x2\x2\x9C\x9E\t\x5\x2\x2\x9D\x9C\x3"+
		"\x2\x2\x2\x9E\xA1\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2"+
		"\xA0<\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA2\xA3\t\x6\x2\x2\xA3\xA4\x3\x2"+
		"\x2\x2\xA4\xA5\b\x1F\x2\x2\xA5>\x3\x2\x2\x2\x5\x2\x98\x9F\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniC
