//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Vasilis\source\repos\SimpleCalc\MiniC\MiniC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniC {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="MiniCParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IMiniCVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="MiniCParser.last"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable([NotNull] MiniCParser.VariableContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="MiniCParser.last"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumber([NotNull] MiniCParser.NumberContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Return</c>
	/// labeled alternative in <see cref="MiniCParser.breakreturn_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturn([NotNull] MiniCParser.ReturnContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Break</c>
	/// labeled alternative in <see cref="MiniCParser.breakreturn_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreak([NotNull] MiniCParser.BreakContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Compound_statement</c>
	/// labeled alternative in <see cref="MiniCParser.compound_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompound_statement([NotNull] MiniCParser.Compound_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>OrOperator</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrOperator([NotNull] MiniCParser.OrOperatorContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Assignment</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] MiniCParser.AssignmentContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Parenthesis</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesis([NotNull] MiniCParser.ParenthesisContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Operators</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOperators([NotNull] MiniCParser.OperatorsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>last_expr</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLast_expr([NotNull] MiniCParser.Last_exprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>AndOperator</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAndOperator([NotNull] MiniCParser.AndOperatorContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Add_sub</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdd_sub([NotNull] MiniCParser.Add_subContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>NotOperator</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotOperator([NotNull] MiniCParser.NotOperatorContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Mult_div</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMult_div([NotNull] MiniCParser.Mult_divContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>PlusplusOperator</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPlusplusOperator([NotNull] MiniCParser.PlusplusOperatorContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>EqualNotOperator</c>
	/// labeled alternative in <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualNotOperator([NotNull] MiniCParser.EqualNotOperatorContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompileUnit([NotNull] MiniCParser.CompileUnitContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] MiniCParser.StatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.print_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrint_st([NotNull] MiniCParser.Print_stContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.prints"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrints([NotNull] MiniCParser.PrintsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.for_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFor_st([NotNull] MiniCParser.For_stContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.dowhile_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDowhile_st([NotNull] MiniCParser.Dowhile_stContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.breakreturn_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakreturn_st([NotNull] MiniCParser.Breakreturn_stContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.while_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhile_st([NotNull] MiniCParser.While_stContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.if_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIf_st([NotNull] MiniCParser.If_stContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.compound_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompound_st([NotNull] MiniCParser.Compound_stContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.func_deffinition_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_deffinition_st([NotNull] MiniCParser.Func_deffinition_stContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.func_call_st"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunc_call_st([NotNull] MiniCParser.Func_call_stContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.fargs"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFargs([NotNull] MiniCParser.FargsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr([NotNull] MiniCParser.ExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="MiniCParser.last"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLast([NotNull] MiniCParser.LastContext context);
}
} // namespace MiniC
