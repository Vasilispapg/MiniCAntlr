//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Vasilis\source\repos\SimpleCalc\MiniC\MiniC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniC {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniCParser : Parser {
	public const int
		IF=1, WHILE=2, BREAK=3, ELSE=4, RETURN=5, FUNCTION=6, AND=7, OR=8, NOT=9, 
		LT=10, GT=11, GTE=12, LTE=13, EQUAL=14, NEQUAL=15, DIV=16, MULT=17, PLUS=18, 
		PLUSPLUS=19, MINUS=20, LBRACKET=21, RBRACKET=22, LP=23, RP=24, ASSIGN=25, 
		SEMICOLON=26, COMMA=27, NUM=28, VARIABLE=29, WS=30;
	public const int
		RULE_compileUnit = 0, RULE_statement = 1, RULE_breakreturn_st = 2, RULE_while_st = 3, 
		RULE_if_st = 4, RULE_compound_st = 5, RULE_func_deffinition_st = 6, RULE_func_call_st = 7, 
		RULE_parameters = 8, RULE_expr = 9, RULE_last = 10;
	public static readonly string[] ruleNames = {
		"compileUnit", "statement", "breakreturn_st", "while_st", "if_st", "compound_st", 
		"func_deffinition_st", "func_call_st", "parameters", "expr", "last"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'while'", "'break'", "'else'", "'return'", "'function'", 
		"'&&'", "'||'", "'!'", "'<'", "'>'", "'>='", "'<='", "'=='", "'!='", "'/'", 
		"'*'", "'+'", "'++'", "'-'", "'{'", "'}'", "'('", "')'", "'='", "';'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "WHILE", "BREAK", "ELSE", "RETURN", "FUNCTION", "AND", "OR", 
		"NOT", "LT", "GT", "GTE", "LTE", "EQUAL", "NEQUAL", "DIV", "MULT", "PLUS", 
		"PLUSPLUS", "MINUS", "LBRACKET", "RBRACKET", "LP", "RP", "ASSIGN", "SEMICOLON", 
		"COMMA", "NUM", "VARIABLE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MiniCParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 22; statement();
				}
				}
				State = 25;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << RETURN) | (1L << FUNCTION) | (1L << NOT) | (1L << LP) | (1L << SEMICOLON) | (1L << NUM) | (1L << VARIABLE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCParser.SEMICOLON, i);
		}
		public Func_deffinition_stContext func_deffinition_st() {
			return GetRuleContext<Func_deffinition_stContext>(0);
		}
		public Func_call_stContext func_call_st() {
			return GetRuleContext<Func_call_stContext>(0);
		}
		public If_stContext if_st() {
			return GetRuleContext<If_stContext>(0);
		}
		public While_stContext while_st() {
			return GetRuleContext<While_stContext>(0);
		}
		public Breakreturn_stContext breakreturn_st() {
			return GetRuleContext<Breakreturn_stContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			int _alt;
			State = 44;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 27; expr(0);
						State = 28; Match(SEMICOLON);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 32;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34; func_deffinition_st();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 35; func_call_st();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 36; if_st();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 37; while_st();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 39;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 38; Match(SEMICOLON);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 41;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 43; breakreturn_st();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Breakreturn_stContext : ParserRuleContext {
		public Breakreturn_stContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakreturn_st; } }
	 
		public Breakreturn_stContext() { }
		public virtual void CopyFrom(Breakreturn_stContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReturnContext : Breakreturn_stContext {
		public ITerminalNode RETURN() { return GetToken(MiniCParser.RETURN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public ReturnContext(Breakreturn_stContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakContext : Breakreturn_stContext {
		public ITerminalNode BREAK() { return GetToken(MiniCParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public BreakContext(Breakreturn_stContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterBreak(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitBreak(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Breakreturn_stContext breakreturn_st() {
		Breakreturn_stContext _localctx = new Breakreturn_stContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_breakreturn_st);
		try {
			State = 52;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BREAK:
				_localctx = new BreakContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; Match(BREAK);
				State = 47; Match(SEMICOLON);
				}
				break;
			case RETURN:
				_localctx = new ReturnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; Match(RETURN);
				State = 49; expr(0);
				State = 50; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(MiniCParser.WHILE, 0); }
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public Compound_stContext compound_st() {
			return GetRuleContext<Compound_stContext>(0);
		}
		public While_stContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_st; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterWhile_st(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitWhile_st(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_st(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_stContext while_st() {
		While_stContext _localctx = new While_stContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_while_st);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(WHILE);
			State = 55; Match(LP);
			State = 56; expr(0);
			State = 57; Match(RP);
			State = 58; compound_st();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MiniCParser.IF, 0); }
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public Compound_stContext compound_st() {
			return GetRuleContext<Compound_stContext>(0);
		}
		public If_stContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_st; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterIf_st(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitIf_st(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_st(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stContext if_st() {
		If_stContext _localctx = new If_stContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_if_st);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(IF);
			State = 61; Match(LP);
			State = 62; expr(0);
			State = 63; Match(RP);
			State = 64; compound_st();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_stContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(MiniCParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(MiniCParser.RBRACKET, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Compound_stContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_st; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterCompound_st(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitCompound_st(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_st(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_stContext compound_st() {
		Compound_stContext _localctx = new Compound_stContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_compound_st);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(LBRACKET);
			State = 70;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << BREAK) | (1L << RETURN) | (1L << FUNCTION) | (1L << NOT) | (1L << LP) | (1L << SEMICOLON) | (1L << NUM) | (1L << VARIABLE))) != 0)) {
				{
				{
				State = 67; statement();
				}
				}
				State = 72;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 73; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_deffinition_stContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(MiniCParser.FUNCTION, 0); }
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public Compound_stContext compound_st() {
			return GetRuleContext<Compound_stContext>(0);
		}
		public ITerminalNode VARIABLE() { return GetToken(MiniCParser.VARIABLE, 0); }
		public Func_deffinition_stContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_deffinition_st; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterFunc_deffinition_st(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitFunc_deffinition_st(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_deffinition_st(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_deffinition_stContext func_deffinition_st() {
		Func_deffinition_stContext _localctx = new Func_deffinition_stContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_func_deffinition_st);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(FUNCTION);
			State = 77;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VARIABLE) {
				{
				State = 76; Match(VARIABLE);
				}
			}

			State = 79; Match(LP);
			State = 80; parameters(0);
			State = 81; Match(RP);
			State = 82; compound_st();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_call_stContext : ParserRuleContext {
		public ITerminalNode VARIABLE() { return GetToken(MiniCParser.VARIABLE, 0); }
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MiniCParser.SEMICOLON, 0); }
		public Func_call_stContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_call_st; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterFunc_call_st(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitFunc_call_st(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_call_st(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_call_stContext func_call_st() {
		Func_call_stContext _localctx = new Func_call_stContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_func_call_st);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(VARIABLE);
			State = 85; Match(LP);
			State = 86; parameters(0);
			State = 87; Match(RP);
			State = 88; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ITerminalNode[] VARIABLE() { return GetTokens(MiniCParser.VARIABLE); }
		public ITerminalNode VARIABLE(int i) {
			return GetToken(MiniCParser.VARIABLE, i);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(MiniCParser.COMMA, 0); }
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		return parameters(0);
	}

	private ParametersContext parameters(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ParametersContext _localctx = new ParametersContext(_ctx, _parentState);
		ParametersContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_parameters, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 94;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 91; Match(VARIABLE);
					}
					} 
				}
				State = 96;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			}
			_ctx.stop = _input.Lt(-1);
			State = 102;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParametersContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameters);
					State = 97;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 98; Match(COMMA);
					State = 99; Match(VARIABLE);
					}
					} 
				}
				State = 104;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignmentContext : ExprContext {
		public ITerminalNode VARIABLE() { return GetToken(MiniCParser.VARIABLE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MiniCParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisContext : ExprContext {
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public ParenthesisContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorsContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(MiniCParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(MiniCParser.OR, 0); }
		public ITerminalNode LT() { return GetToken(MiniCParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(MiniCParser.GT, 0); }
		public ITerminalNode LTE() { return GetToken(MiniCParser.LTE, 0); }
		public ITerminalNode GTE() { return GetToken(MiniCParser.GTE, 0); }
		public ITerminalNode EQUAL() { return GetToken(MiniCParser.EQUAL, 0); }
		public ITerminalNode NEQUAL() { return GetToken(MiniCParser.NEQUAL, 0); }
		public OperatorsContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitOperators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperators(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Last_exprContext : ExprContext {
		public LastContext last() {
			return GetRuleContext<LastContext>(0);
		}
		public Last_exprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterLast_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitLast_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLast_expr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_subContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(MiniCParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(MiniCParser.MINUS, 0); }
		public Add_subContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterAdd_sub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitAdd_sub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_sub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotOperatorContext : ExprContext {
		public ITerminalNode NOT() { return GetToken(MiniCParser.NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterNotOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitNotOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Mult_divContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(MiniCParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(MiniCParser.DIV, 0); }
		public Mult_divContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterMult_div(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitMult_div(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult_div(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusplusOperatorContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUSPLUS() { return GetToken(MiniCParser.PLUSPLUS, 0); }
		public PlusplusOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterPlusplusOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitPlusplusOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusplusOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				_localctx = new Last_exprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 106; last();
				}
				break;

			case 2:
				{
				_localctx = new AssignmentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 107; Match(VARIABLE);
				State = 108; Match(ASSIGN);
				State = 109; expr(5);
				}
				break;

			case 3:
				{
				_localctx = new ParenthesisContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 110; Match(LP);
				State = 111; expr(0);
				State = 112; Match(RP);
				}
				break;

			case 4:
				{
				_localctx = new NotOperatorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 114; Match(NOT);
				State = 115; expr(2);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 131;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 129;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
					case 1:
						{
						_localctx = new Mult_divContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 118;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 119;
						((Mult_divContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
							((Mult_divContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 120; expr(8);
						}
						break;

					case 2:
						{
						_localctx = new Add_subContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 121;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 122;
						((Add_subContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((Add_subContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 123; expr(7);
						}
						break;

					case 3:
						{
						_localctx = new OperatorsContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 124;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 125;
						((OperatorsContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << LT) | (1L << GT) | (1L << GTE) | (1L << LTE) | (1L << EQUAL) | (1L << NEQUAL))) != 0)) ) {
							((OperatorsContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 126; expr(4);
						}
						break;

					case 4:
						{
						_localctx = new PlusplusOperatorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 127;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 128; Match(PLUSPLUS);
						}
						break;
					}
					} 
				}
				State = 133;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LastContext : ParserRuleContext {
		public LastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_last; } }
	 
		public LastContext() { }
		public virtual void CopyFrom(LastContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableContext : LastContext {
		public ITerminalNode VARIABLE() { return GetToken(MiniCParser.VARIABLE, 0); }
		public VariableContext(LastContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : LastContext {
		public ITerminalNode NUM() { return GetToken(MiniCParser.NUM, 0); }
		public NumberContext(LastContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastContext last() {
		LastContext _localctx = new LastContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_last);
		try {
			State = 136;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUM:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 134; Match(NUM);
				}
				break;
			case VARIABLE:
				_localctx = new VariableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 135; Match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return parameters_sempred((ParametersContext)_localctx, predIndex);

		case 9: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool parameters_sempred(ParametersContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 3);

		case 4: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3 \x8D\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x6\x2\x1A\n\x2\r\x2\xE\x2\x1B\x3\x3"+
		"\x3\x3\x3\x3\x6\x3!\n\x3\r\x3\xE\x3\"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x6"+
		"\x3*\n\x3\r\x3\xE\x3+\x3\x3\x5\x3/\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x5\x4\x37\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\a\aG\n\a\f\a\xE\aJ\v\a\x3\a\x3\a\x3"+
		"\b\x3\b\x5\bP\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\n\x3\n\a\n_\n\n\f\n\xE\n\x62\v\n\x3\n\x3\n\x3\n\a\ng\n\n\f\n\xE"+
		"\nj\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\vw\n"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\x84\n\v"+
		"\f\v\xE\v\x87\v\v\x3\f\x3\f\x5\f\x8B\n\f\x3\f\x2\x2\x4\x12\x14\r\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x2\x5\x3"+
		"\x2\x12\x13\x4\x2\x14\x14\x16\x16\x4\x2\t\n\f\x11\x97\x2\x19\x3\x2\x2"+
		"\x2\x4.\x3\x2\x2\x2\x6\x36\x3\x2\x2\x2\b\x38\x3\x2\x2\x2\n>\x3\x2\x2\x2"+
		"\f\x44\x3\x2\x2\x2\xEM\x3\x2\x2\x2\x10V\x3\x2\x2\x2\x12\\\x3\x2\x2\x2"+
		"\x14v\x3\x2\x2\x2\x16\x8A\x3\x2\x2\x2\x18\x1A\x5\x4\x3\x2\x19\x18\x3\x2"+
		"\x2\x2\x1A\x1B\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C"+
		"\x3\x3\x2\x2\x2\x1D\x1E\x5\x14\v\x2\x1E\x1F\a\x1C\x2\x2\x1F!\x3\x2\x2"+
		"\x2 \x1D\x3\x2\x2\x2!\"\x3\x2\x2\x2\" \x3\x2\x2\x2\"#\x3\x2\x2\x2#/\x3"+
		"\x2\x2\x2$/\x5\xE\b\x2%/\x5\x10\t\x2&/\x5\n\x6\x2\'/\x5\b\x5\x2(*\a\x1C"+
		"\x2\x2)(\x3\x2\x2\x2*+\x3\x2\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2,/\x3\x2"+
		"\x2\x2-/\x5\x6\x4\x2. \x3\x2\x2\x2.$\x3\x2\x2\x2.%\x3\x2\x2\x2.&\x3\x2"+
		"\x2\x2.\'\x3\x2\x2\x2.)\x3\x2\x2\x2.-\x3\x2\x2\x2/\x5\x3\x2\x2\x2\x30"+
		"\x31\a\x5\x2\x2\x31\x37\a\x1C\x2\x2\x32\x33\a\a\x2\x2\x33\x34\x5\x14\v"+
		"\x2\x34\x35\a\x1C\x2\x2\x35\x37\x3\x2\x2\x2\x36\x30\x3\x2\x2\x2\x36\x32"+
		"\x3\x2\x2\x2\x37\a\x3\x2\x2\x2\x38\x39\a\x4\x2\x2\x39:\a\x19\x2\x2:;\x5"+
		"\x14\v\x2;<\a\x1A\x2\x2<=\x5\f\a\x2=\t\x3\x2\x2\x2>?\a\x3\x2\x2?@\a\x19"+
		"\x2\x2@\x41\x5\x14\v\x2\x41\x42\a\x1A\x2\x2\x42\x43\x5\f\a\x2\x43\v\x3"+
		"\x2\x2\x2\x44H\a\x17\x2\x2\x45G\x5\x4\x3\x2\x46\x45\x3\x2\x2\x2GJ\x3\x2"+
		"\x2\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IK\x3\x2\x2\x2JH\x3\x2\x2\x2KL\a"+
		"\x18\x2\x2L\r\x3\x2\x2\x2MO\a\b\x2\x2NP\a\x1F\x2\x2ON\x3\x2\x2\x2OP\x3"+
		"\x2\x2\x2PQ\x3\x2\x2\x2QR\a\x19\x2\x2RS\x5\x12\n\x2ST\a\x1A\x2\x2TU\x5"+
		"\f\a\x2U\xF\x3\x2\x2\x2VW\a\x1F\x2\x2WX\a\x19\x2\x2XY\x5\x12\n\x2YZ\a"+
		"\x1A\x2\x2Z[\a\x1C\x2\x2[\x11\x3\x2\x2\x2\\`\b\n\x1\x2]_\a\x1F\x2\x2^"+
		"]\x3\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61h\x3"+
		"\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x64\f\x3\x2\x2\x64\x65\a\x1D\x2\x2\x65"+
		"g\a\x1F\x2\x2\x66\x63\x3\x2\x2\x2gj\x3\x2\x2\x2h\x66\x3\x2\x2\x2hi\x3"+
		"\x2\x2\x2i\x13\x3\x2\x2\x2jh\x3\x2\x2\x2kl\b\v\x1\x2lw\x5\x16\f\x2mn\a"+
		"\x1F\x2\x2no\a\x1B\x2\x2ow\x5\x14\v\apq\a\x19\x2\x2qr\x5\x14\v\x2rs\a"+
		"\x1A\x2\x2sw\x3\x2\x2\x2tu\a\v\x2\x2uw\x5\x14\v\x4vk\x3\x2\x2\x2vm\x3"+
		"\x2\x2\x2vp\x3\x2\x2\x2vt\x3\x2\x2\x2w\x85\x3\x2\x2\x2xy\f\t\x2\x2yz\t"+
		"\x2\x2\x2z\x84\x5\x14\v\n{|\f\b\x2\x2|}\t\x3\x2\x2}\x84\x5\x14\v\t~\x7F"+
		"\f\x5\x2\x2\x7F\x80\t\x4\x2\x2\x80\x84\x5\x14\v\x6\x81\x82\f\x3\x2\x2"+
		"\x82\x84\a\x15\x2\x2\x83x\x3\x2\x2\x2\x83{\x3\x2\x2\x2\x83~\x3\x2\x2\x2"+
		"\x83\x81\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x86\x3"+
		"\x2\x2\x2\x86\x15\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x88\x8B\a\x1E\x2\x2"+
		"\x89\x8B\a\x1F\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x89\x3\x2\x2\x2\x8B\x17\x3"+
		"\x2\x2\x2\xF\x1B\"+.\x36HO`hv\x83\x85\x8A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniC
