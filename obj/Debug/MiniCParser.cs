//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Vasilis\source\repos\SimpleCalc\MiniC\MiniC.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MiniC {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MiniCParser : Parser {
	public const int
		IF=1, WHILE=2, BREAK=3, ELSE=4, RETURN=5, FUNCTION=6, UNION=7, UNIQUE=8, 
		JOIN=9, SETXOR=10, SETDIFF=11, ISMEMBER=12, AND=13, OR=14, NOT=15, LT=16, 
		GT=17, GTE=18, LTE=19, EQUAL=20, NEQUAL=21, DIV=22, MULT=23, PLUS=24, 
		PLUSPLUS=25, MINUS=26, LBRACKET=27, RBRACKET=28, LP=29, RP=30, ASSIGN=31, 
		SEMICOLON=32, COMMA=33, NUM=34, VARIABLE=35, WS=36;
	public const int
		RULE_compileUnit = 0, RULE_statement = 1, RULE_compound_st = 2, RULE_expr = 3;
	public static readonly string[] ruleNames = {
		"compileUnit", "statement", "compound_st", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'while'", "'break'", "'else'", "'return'", "'function'", 
		"'union'", "'unique'", "'join'", "'setxor'", "'setdiff'", "'ismember'", 
		"'&&'", "'||'", "'!'", "'<'", "'>'", "'>='", "'<='", "'=='", "'!='", "'/'", 
		"'*'", "'+'", "'++'", "'-'", "'{'", "'}'", "'('", "')'", "'='", "';'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "WHILE", "BREAK", "ELSE", "RETURN", "FUNCTION", "UNION", "UNIQUE", 
		"JOIN", "SETXOR", "SETDIFF", "ISMEMBER", "AND", "OR", "NOT", "LT", "GT", 
		"GTE", "LTE", "EQUAL", "NEQUAL", "DIV", "MULT", "PLUS", "PLUSPLUS", "MINUS", 
		"LBRACKET", "RBRACKET", "LP", "RP", "ASSIGN", "SEMICOLON", "COMMA", "NUM", 
		"VARIABLE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MiniCParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Compound_stContext compound_st() {
			return GetRuleContext<Compound_stContext>(0);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			State = 12;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Eof:
			case IF:
			case WHILE:
			case RETURN:
			case FUNCTION:
			case NOT:
			case RBRACKET:
			case LP:
			case SEMICOLON:
			case NUM:
			case VARIABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8; statement();
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9; compound_st();
				State = 10; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(MiniCParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(MiniCParser.SEMICOLON, i);
		}
		public ITerminalNode FUNCTION() { return GetToken(MiniCParser.FUNCTION, 0); }
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public Compound_stContext compound_st() {
			return GetRuleContext<Compound_stContext>(0);
		}
		public ITerminalNode IF() { return GetToken(MiniCParser.IF, 0); }
		public ITerminalNode WHILE() { return GetToken(MiniCParser.WHILE, 0); }
		public ITerminalNode RETURN() { return GetToken(MiniCParser.RETURN, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 61;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Eof:
			case RBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case NOT:
			case LP:
			case NUM:
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 18;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 15; expr(0);
					State = 16; Match(SEMICOLON);
					}
					}
					State = 20;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << LP) | (1L << NUM) | (1L << VARIABLE))) != 0) );
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 22; Match(FUNCTION);
				State = 23; Match(LP);
				State = 27;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << LP) | (1L << NUM) | (1L << VARIABLE))) != 0)) {
					{
					{
					State = 24; expr(0);
					}
					}
					State = 29;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 30; Match(RP);
				State = 31; compound_st();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 32; Match(IF);
				State = 33; Match(LP);
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 34; expr(0);
					}
					}
					State = 37;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << LP) | (1L << NUM) | (1L << VARIABLE))) != 0) );
				State = 39; Match(RP);
				State = 40; compound_st();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 42; Match(WHILE);
				State = 43; Match(LP);
				State = 45;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 44; expr(0);
					}
					}
					State = 47;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NOT) | (1L << LP) | (1L << NUM) | (1L << VARIABLE))) != 0) );
				State = 49; Match(RP);
				State = 50; compound_st();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 6);
				{
				State = 53;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 52; Match(SEMICOLON);
					}
					}
					State = 55;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==SEMICOLON );
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 57; Match(RETURN);
				State = 58; expr(0);
				State = 59; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_stContext : ParserRuleContext {
		public ITerminalNode LBRACKET() { return GetToken(MiniCParser.LBRACKET, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(MiniCParser.RBRACKET, 0); }
		public Compound_stContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_st; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterCompound_st(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitCompound_st(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_st(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_stContext compound_st() {
		Compound_stContext _localctx = new Compound_stContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_compound_st);
		try {
			State = 69;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; Match(LBRACKET);
				State = 64; statement();
				State = 65; Match(RBRACKET);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; Match(LBRACKET);
				State = 68; Match(RBRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrOperatorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(MiniCParser.OR, 0); }
		public OrOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterOrOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitOrOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NequalOperatorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode NEQUAL() { return GetToken(MiniCParser.NEQUAL, 0); }
		public NequalOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterNequalOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitNequalOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNequalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : ExprContext {
		public ITerminalNode VARIABLE() { return GetToken(MiniCParser.VARIABLE, 0); }
		public VariableContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndOperatorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(MiniCParser.AND, 0); }
		public AndOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterAndOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitAndOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Add_subContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(MiniCParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(MiniCParser.MINUS, 0); }
		public Add_subContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterAdd_sub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitAdd_sub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_sub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GteOperatorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GTE() { return GetToken(MiniCParser.GTE, 0); }
		public GteOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterGteOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitGteOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGteOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Mult_divContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(MiniCParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(MiniCParser.DIV, 0); }
		public Mult_divContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterMult_div(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitMult_div(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult_div(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualOperatorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(MiniCParser.EQUAL, 0); }
		public EqualOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterEqualOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitEqualOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExprContext {
		public ITerminalNode VARIABLE() { return GetToken(MiniCParser.VARIABLE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MiniCParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LteOperatorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LTE() { return GetToken(MiniCParser.LTE, 0); }
		public LteOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterLteOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitLteOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLteOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisContext : ExprContext {
		public ITerminalNode LP() { return GetToken(MiniCParser.LP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RP() { return GetToken(MiniCParser.RP, 0); }
		public ParenthesisContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExprContext {
		public ITerminalNode NUM() { return GetToken(MiniCParser.NUM, 0); }
		public NumberContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GtOperatorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GT() { return GetToken(MiniCParser.GT, 0); }
		public GtOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterGtOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitGtOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LtOperatorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LT() { return GetToken(MiniCParser.LT, 0); }
		public LtOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterLtOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitLtOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotOperatorContext : ExprContext {
		public ITerminalNode NOT() { return GetToken(MiniCParser.NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterNotOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitNotOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusplusOperatorContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUSPLUS() { return GetToken(MiniCParser.PLUSPLUS, 0); }
		public PlusplusOperatorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.EnterPlusplusOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniCListener typedListener = listener as IMiniCListener;
			if (typedListener != null) typedListener.ExitPlusplusOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMiniCVisitor<TResult> typedVisitor = visitor as IMiniCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusplusOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				_localctx = new NumberContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 72; Match(NUM);
				}
				break;

			case 2:
				{
				_localctx = new VariableContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 73; Match(VARIABLE);
				}
				break;

			case 3:
				{
				_localctx = new AssignmentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 74; Match(VARIABLE);
				State = 75; Match(ASSIGN);
				State = 76; expr(12);
				}
				break;

			case 4:
				{
				_localctx = new ParenthesisContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 77; Match(LP);
				State = 78; expr(0);
				State = 79; Match(RP);
				}
				break;

			case 5:
				{
				_localctx = new NotOperatorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 81; Match(NOT);
				State = 82; expr(4);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 119;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 117;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
					case 1:
						{
						_localctx = new Mult_divContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 85;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 86;
						((Mult_divContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==DIV || _la==MULT) ) {
							((Mult_divContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 87; expr(15);
						}
						break;

					case 2:
						{
						_localctx = new Add_subContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 88;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 89;
						((Add_subContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((Add_subContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 90; expr(14);
						}
						break;

					case 3:
						{
						_localctx = new AndOperatorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 91;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 92; Match(AND);
						State = 93; expr(11);
						}
						break;

					case 4:
						{
						_localctx = new OrOperatorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 94;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 95; Match(OR);
						State = 96; expr(10);
						}
						break;

					case 5:
						{
						_localctx = new LtOperatorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 97;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 98; Match(LT);
						State = 99; expr(9);
						}
						break;

					case 6:
						{
						_localctx = new GtOperatorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 100;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 101; Match(GT);
						State = 102; expr(8);
						}
						break;

					case 7:
						{
						_localctx = new LteOperatorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 103;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 104; Match(LTE);
						State = 105; expr(7);
						}
						break;

					case 8:
						{
						_localctx = new GteOperatorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 106;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 107; Match(GTE);
						State = 108; expr(6);
						}
						break;

					case 9:
						{
						_localctx = new EqualOperatorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 109;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 110; Match(EQUAL);
						State = 111; expr(4);
						}
						break;

					case 10:
						{
						_localctx = new NequalOperatorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 112;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 113; Match(NEQUAL);
						State = 114; expr(3);
						}
						break;

					case 11:
						{
						_localctx = new PlusplusOperatorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 115;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 116; Match(PLUSPLUS);
						}
						break;
					}
					} 
				}
				State = 121;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 14);

		case 1: return Precpred(_ctx, 13);

		case 2: return Precpred(_ctx, 10);

		case 3: return Precpred(_ctx, 9);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 7);

		case 6: return Precpred(_ctx, 6);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 3);

		case 9: return Precpred(_ctx, 2);

		case 10: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3&}\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\xF\n\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x6\x3\x15\n\x3\r\x3\xE\x3\x16\x3\x3\x3\x3\x3\x3"+
		"\a\x3\x1C\n\x3\f\x3\xE\x3\x1F\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3"+
		"&\n\x3\r\x3\xE\x3\'\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3\x30\n\x3"+
		"\r\x3\xE\x3\x31\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3\x38\n\x3\r\x3\xE\x3\x39"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3@\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4H\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5V\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\a\x5x\n\x5\f\x5\xE\x5{\v\x5\x3\x5\x2\x2\x3\b\x6\x2\x2"+
		"\x4\x2\x6\x2\b\x2\x2\x4\x3\x2\x18\x19\x4\x2\x1A\x1A\x1C\x1C\x94\x2\xE"+
		"\x3\x2\x2\x2\x4?\x3\x2\x2\x2\x6G\x3\x2\x2\x2\bU\x3\x2\x2\x2\n\xF\x5\x4"+
		"\x3\x2\v\f\x5\x6\x4\x2\f\r\x5\x4\x3\x2\r\xF\x3\x2\x2\x2\xE\n\x3\x2\x2"+
		"\x2\xE\v\x3\x2\x2\x2\xF\x3\x3\x2\x2\x2\x10@\x3\x2\x2\x2\x11\x12\x5\b\x5"+
		"\x2\x12\x13\a\"\x2\x2\x13\x15\x3\x2\x2\x2\x14\x11\x3\x2\x2\x2\x15\x16"+
		"\x3\x2\x2\x2\x16\x14\x3\x2\x2\x2\x16\x17\x3\x2\x2\x2\x17@\x3\x2\x2\x2"+
		"\x18\x19\a\b\x2\x2\x19\x1D\a\x1F\x2\x2\x1A\x1C\x5\b\x5\x2\x1B\x1A\x3\x2"+
		"\x2\x2\x1C\x1F\x3\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E"+
		" \x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2 !\a \x2\x2!@\x5\x6\x4\x2\"#\a\x3\x2"+
		"\x2#%\a\x1F\x2\x2$&\x5\b\x5\x2%$\x3\x2\x2\x2&\'\x3\x2\x2\x2\'%\x3\x2\x2"+
		"\x2\'(\x3\x2\x2\x2()\x3\x2\x2\x2)*\a \x2\x2*+\x5\x6\x4\x2+@\x3\x2\x2\x2"+
		",-\a\x4\x2\x2-/\a\x1F\x2\x2.\x30\x5\b\x5\x2/.\x3\x2\x2\x2\x30\x31\x3\x2"+
		"\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x34"+
		"\a \x2\x2\x34\x35\x5\x6\x4\x2\x35@\x3\x2\x2\x2\x36\x38\a\"\x2\x2\x37\x36"+
		"\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2"+
		":@\x3\x2\x2\x2;<\a\a\x2\x2<=\x5\b\x5\x2=>\a\"\x2\x2>@\x3\x2\x2\x2?\x10"+
		"\x3\x2\x2\x2?\x14\x3\x2\x2\x2?\x18\x3\x2\x2\x2?\"\x3\x2\x2\x2?,\x3\x2"+
		"\x2\x2?\x37\x3\x2\x2\x2?;\x3\x2\x2\x2@\x5\x3\x2\x2\x2\x41\x42\a\x1D\x2"+
		"\x2\x42\x43\x5\x4\x3\x2\x43\x44\a\x1E\x2\x2\x44H\x3\x2\x2\x2\x45\x46\a"+
		"\x1D\x2\x2\x46H\a\x1E\x2\x2G\x41\x3\x2\x2\x2G\x45\x3\x2\x2\x2H\a\x3\x2"+
		"\x2\x2IJ\b\x5\x1\x2JV\a$\x2\x2KV\a%\x2\x2LM\a%\x2\x2MN\a!\x2\x2NV\x5\b"+
		"\x5\xEOP\a\x1F\x2\x2PQ\x5\b\x5\x2QR\a \x2\x2RV\x3\x2\x2\x2ST\a\x11\x2"+
		"\x2TV\x5\b\x5\x6UI\x3\x2\x2\x2UK\x3\x2\x2\x2UL\x3\x2\x2\x2UO\x3\x2\x2"+
		"\x2US\x3\x2\x2\x2Vy\x3\x2\x2\x2WX\f\x10\x2\x2XY\t\x2\x2\x2Yx\x5\b\x5\x11"+
		"Z[\f\xF\x2\x2[\\\t\x3\x2\x2\\x\x5\b\x5\x10]^\f\f\x2\x2^_\a\xF\x2\x2_x"+
		"\x5\b\x5\r`\x61\f\v\x2\x2\x61\x62\a\x10\x2\x2\x62x\x5\b\x5\f\x63\x64\f"+
		"\n\x2\x2\x64\x65\a\x12\x2\x2\x65x\x5\b\x5\v\x66g\f\t\x2\x2gh\a\x13\x2"+
		"\x2hx\x5\b\x5\nij\f\b\x2\x2jk\a\x15\x2\x2kx\x5\b\x5\tlm\f\a\x2\x2mn\a"+
		"\x14\x2\x2nx\x5\b\x5\bop\f\x5\x2\x2pq\a\x16\x2\x2qx\x5\b\x5\x6rs\f\x4"+
		"\x2\x2st\a\x17\x2\x2tx\x5\b\x5\x5uv\f\x3\x2\x2vx\a\x1B\x2\x2wW\x3\x2\x2"+
		"\x2wZ\x3\x2\x2\x2w]\x3\x2\x2\x2w`\x3\x2\x2\x2w\x63\x3\x2\x2\x2w\x66\x3"+
		"\x2\x2\x2wi\x3\x2\x2\x2wl\x3\x2\x2\x2wo\x3\x2\x2\x2wr\x3\x2\x2\x2wu\x3"+
		"\x2\x2\x2x{\x3\x2\x2\x2yw\x3\x2\x2\x2yz\x3\x2\x2\x2z\t\x3\x2\x2\x2{y\x3"+
		"\x2\x2\x2\r\xE\x16\x1D\'\x31\x39?GUwy";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MiniC
